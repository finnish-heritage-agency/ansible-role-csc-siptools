---
- name: Check 'siptools_user' is defined
  assert:
    that:
      - siptools_user is defined

- name: Enable EPEL
  yum:
    name: epel-release
  tags:
    - jhove
    - iso-schematron
    - vnu
    - pngcheck
    - ghostscript
    - siptools

- name: Install dependencies
  yum:
    name:
      - java-latest-openjdk
      - python2-devel
      - python2-pip
      - python2-pymediainfo
      - python-virtualenv
      - python-requests
      - python-pillow
      - python-wand
      - libreoffice
      - xhtml1-dtds
      - git
  tags:
    - jhove
    - iso-schematron
    - vnu
    - pngcheck
    - siptools

- name: Install development tools
  yum:
    name: "@Development tools"
    state: present
  tags:
    - file
    - pngcheck
    - ghostscript

- name: Install additional development tools
  yum:
    name:
      - automake
      - zlib-devel
      - zlib-static
  tags:
    - file
    - pngcheck
    - ghostscript

- name: Check JHOVE version
  command: "jhove --version"
  ignore_errors: true
  register: version_output
  tags:
    - jhove

- name: Store JHOVE version
  set_fact:
    jhove_is_latest: >-
      {{ "rc" in version_output and version_output.rc == 0 and version_output.stdout.startswith(CURRENT_JHOVE_VERSION) }}
  tags:
    - jhove

- name: Download JHOVE installer
  get_url:
    url: >
      https://software.openpreservation.org/rel/jhove/1.20/jhove-xplt-installer-1.20.1.jar
    dest: /tmp/jhove-installer.jar
    checksum: >
      sha256:67ff5fd160b51c96a54d16c853a7cd7fb27ea9487c59dc8187e6356239e91699
  when: not jhove_is_latest
  tags:
    - jhove

- name: Add JHOVE autoinstall file
  template:
    src: templates/jhove-auto-install.xml.j2
    dest: /tmp/jhove-auto-install.xml
  when: not jhove_is_latest
  tags:
    - jhove

- name: Install JHOVE
  command: "java -jar /tmp/jhove-installer.jar /tmp/jhove-auto-install.xml"
  when: not jhove_is_latest
  tags:
    - jhove

- name: Add JHOVE symlink
  file:
    src: "{{ jhove_install_path }}/jhove"
    dest: /usr/bin/jhove
    state: link
  when: not jhove_is_latest
  tags:
    - jhove

- name: Check VeraPDF version
  command: "verapdf --version"
  ignore_errors: true
  register: version_output

- name: Store VeraPDF version
  set_fact:
    verapdf_is_latest: >-
      {{ "rc" in version_output and version_output.rc == 0 and version_output.stdout_lines[0] == "veraPDF " + CURRENT_VERAPDF_VERSION }}

- name: Download VeraPDF installer
  get_url:
    url: >
      https://software.verapdf.org/releases/1.14/verapdf-greenfield-{{ CURRENT_VERAPDF_VERSION }}-installer.zip
    dest: /tmp/verapdf_latest.zip
    checksum: >
      sha256:6bfa84385369635789d540dc46cb627d28d84eca1aa9fb33df21800f8f22a2dc
  when: not verapdf_is_latest

- name: Create temporary VeraPDF directory
  file:
    path: /tmp/verapdf
    state: directory
  when: not verapdf_is_latest

- name: Unpack VeraPDF
  unarchive:
    src: /tmp/verapdf_latest.zip
    dest: /tmp/verapdf
    remote_src: true
  when: not verapdf_is_latest
  tags:
    - verapdf

- name: Add VeraPDF autoinstall file
  template:
    src: templates/verapdf-auto-install.xml.j2
    dest: /tmp/verapdf-auto-install.xml
  when: not verapdf_is_latest
  tags:
    - verapdf

- name: Install VeraPDF
  command:
    argv:
      - java
      - "-jar"
      - "/tmp/verapdf/verapdf-greenfield-{{ CURRENT_VERAPDF_VERSION }}/verapdf-izpack-installer-{{ CURRENT_VERAPDF_VERSION }}.jar"
      - "/tmp/verapdf-auto-install.xml"
  when: not verapdf_is_latest
  tags:
    - verapdf

- name: Add VeraPDF symlink
  file:
    src: "{{ verapdf_install_path }}/verapdf"
    dest: /usr/bin/verapdf
    state: link
  tags:
    - verapdf

# VeraPDF will try to write to the global configuration directory even when
# run as a non-root user. Change the owner and group as a workaround.
# See: https://github.com/veraPDF/veraPDF-library/issues/1004
- name: Change VeraPDF configuration directory owner
  file:
    path: "{{ verapdf_install_path }}/config"
    state: directory
    recurse: true
    owner: "{{ siptools_user }}"
    group: "{{ siptools_user }}"
  tags:
    - verapdf

- name: Check for iso-schematron-xslt1 directory
  stat:
    path: /usr/share/iso_schematron_xslt1
  register: schematron_output
  tags:
    - iso-schematron

- name: Store iso-schematron-xslt1 installation
  set_fact:
    iso_schematron_installed: "{{ schematron_output.stat.exists }}"
  tags:
    - iso-schematron

- name: Clone iso-schematron-xslt1
  git:
    repo: https://github.com/Digital-Preservation-Finland/iso-schematron-xslt1
    dest: /tmp/iso-schematron-xslt1
    force: true
  when: not iso_schematron_installed
  tags:
    - iso-schematron

- name: Install iso-schematron-xslt1
  command: "make install"
  args:
    chdir: /tmp/iso-schematron-xslt1
  when: not iso_schematron_installed
  tags:
    - iso-schematron

- name: Check VNU installation
  command: "vnu --version"
  ignore_errors: true
  register: version_output
  tags: vnu

- name: Store VNU version
  set_fact:
    vnu_is_latest: >-
      {{ "rc" in version_output and version_output.rc == 0 and version_output.stdout == CURRENT_VNU_VERSION }}
  tags:
    - vnu

- name: Download VNU archive
  get_url:
    url: >
      https://github.com/validator/validator/releases/download/18.11.5/vnu.jar_18.11.5.zip
    dest: /tmp/vnu.zip
    checksum: >
      sha256:b9785a3ab51671509c8d418cc84298b1389ca2d82107aa0537544090a7c51862
  when: not vnu_is_latest
  tags:
    - vnu

- name: Create temporary VNU directory
  file:
    path: /tmp/vnu_latest
    state: directory
  when: not vnu_is_latest
  tags:
    - vnu

- name: Extract VNU archive
  unarchive:
    src: /tmp/vnu.zip
    dest: /tmp/vnu_latest
    remote_src: true
  when: not vnu_is_latest
  tags:
    - vnu

- name: Create VNU installation directory
  file:
    path: "{{ vnu_install_path }}"
    state: directory
  when: not vnu_is_latest
  tags:
    - vnu

- name: Install vnu.jar
  copy:
    src: /tmp/vnu_latest/dist/vnu.jar
    dest: /usr/share/java/vnu/vnu.jar
    remote_src: true
  when: not vnu_is_latest
  tags:
    - vnu

- name: Install vnu shell script
  template:
    src: templates/vnu.j2
    dest: /usr/bin/vnu
    mode: u=rwx,g=rx,o=rx
  when: not vnu_is_latest
  tags:
    - vnu

- name: Check siptools installation
  shell: "cat .venv/installed_version"
  args:
    chdir: "{{ siptools_install_path }}"
  ignore_errors: true
  register: siptools_output
  tags:
    - siptools

- name: Store siptools installation status
  set_fact:
    siptools_is_latest: >-
      {{ "rc" in siptools_output and siptools_output.rc == 0 and siptools_output.stdout == CURRENT_SIPTOOLS_VERSION }}
  tags:
    - siptools

- name: Install M2Crypto dependencies
  yum:
    name:
      - openssl-devel
      - swig
      - gcc
  when: siptools_is_latest is not defined or not siptools_is_latest
  tags:
    - siptools

- name: Check pngcheck installation
  command: "pngcheck"
  ignore_errors: true
  register: version_output
  tags:
    - pngcheck

- name: Store pngcheck version
  set_fact:
    pngcheck_is_latest: >-
      {{ "rc" in version_output and version_output.rc == 0 and version_output.stdout.startswith(CURRENT_PNGCHECK_VERSION) }}
  tags:
    - pngcheck

- name: Clone pngcheck from GitHub
  git:
    repo: https://github.com/jbowler/pngcheck
    dest: /tmp/pngcheck
    force: true
    version: 5ba3bd6251008f5caca5e2c607870e2a2aad9614
  when: not pngcheck_is_latest
  tags:
    - pngcheck

- name: Compile pngcheck
  command: "make ZINC=-I/usr/include ZLIB=/usr/lib64/libz.a -f Makefile.unx"
  args:
    chdir: /tmp/pngcheck
  when: not pngcheck_is_latest
  tags:
    - pngcheck

- name: Copy pngcheck to /usr/bin
  copy:
    src: /tmp/pngcheck/pngcheck
    dest: /usr/bin/pngcheck
    remote_src: true
    mode: u=rwx,g=rx,o=rx
  when: not pngcheck_is_latest
  tags:
    - pngcheck

- name: Check Ghostscript installation
  command: "gs --version"
  ignore_errors: true
  register: version_output
  tags:
    - ghostscript

- name: Check if Ghostscript is up-to-date
  set_fact:
    ghostscript_is_latest: >-
      {{ "rc" in version_output and version_output.rc == 0 and version_output.stdout == CURRENT_GHOSTSCRIPT_VERSION }}
  tags:
    - ghostscript

- name: Download Ghostscript
  get_url:
    url: >
      https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs920/ghostscript-9.20.tar.gz
    dest: /tmp/ghostscript.tar.gz
    checksum: >
      sha256:949b64b46ecf8906db54a94ecf83ab97534ebf946f770d3c3f283cb469cb6e14
  when: not ghostscript_is_latest
  tags: ghostscript

- name: Create temporary Ghostscript directory
  file:
    path: /tmp/ghostscript_latest
    state: directory
  when: not ghostscript_is_latest
  tags: ghostscript

- name: Extract Ghostscript
  unarchive:
    src: /tmp/ghostscript.tar.gz
    dest: /tmp/ghostscript_latest
    remote_src: true
  when: not ghostscript_is_latest
  tags: ghostscript

- name: Compile Ghostscript - configure
  command: "./configure --prefix=/usr"
  args:
    chdir: "/tmp/ghostscript_latest/ghostscript-{{ CURRENT_GHOSTSCRIPT_VERSION }}"
  when: not ghostscript_is_latest
  tags: ghostscript

- name: Compile Ghostscript - make clean
  command: "make clean"
  args:
    chdir: "/tmp/ghostscript_latest/ghostscript-{{ CURRENT_GHOSTSCRIPT_VERSION }}"
  when: not ghostscript_is_latest
  tags: ghostscript

- name: Compile Ghostscript - make
  command: "make"
  args:
    chdir: "/tmp/ghostscript_latest/ghostscript-{{ CURRENT_GHOSTSCRIPT_VERSION }}"
  when: not ghostscript_is_latest
  tags: ghostscript

- name: Compile Ghostscript - make install
  command: "make install"
  args:
    chdir: "/tmp/ghostscript_latest/ghostscript-{{ CURRENT_GHOSTSCRIPT_VERSION }}"
  when: not ghostscript_is_latest
  tags: ghostscript

#- name: Clone dpres-siptools from GitHub
#  git:
#    repo: https://github.com/Digital-Preservation-Finland/dpres-siptools
#    dest: "{{ siptools_install_path }}"
#    force: true
#  become_user: "{{ siptools_user }}"
#  when: not siptools_is_latest
#  tags: siptools

# This should only be used for patches that don't have upstream fixes yet;
# for the rest of the time this should be commented.
- name: Clone patched dpres-siptools
  git:
    repo: https://github.com/janpulkk/dpres-siptools
    dest: "{{ siptools_install_path }}"
    version: "cfb39e88b9cc29c22bebd4cce9ed4dc501d6955f"  # py2_exception_fix
    force: true
  become_user: "{{ siptools_user }}"
  tags: siptools

- name: Create virtualenv and install requirements
  pip:
    chdir: "{{ siptools_install_path }}"
    virtualenv: ".venv"
    # 'virtualenv-2' is broken and fails due to an ImportError, while
    # 'python2.7 -m virtualenv' works
    virtualenv_command: virtualenv-2
    requirements: requirements_github.txt
    state: latest
  become_user: "{{ siptools_user }}"
  tags: siptools

- name: Install dpx-validator
  pip:
    chdir: "{{ siptools_install_path }}"
    virtualenv: ".venv"
    virtualenv_command: virtualenv-2
    name: git+https://github.com/Digital-Preservation-Finland/dpx-validator
  become_user: "{{ siptools_user }}"
  when: not siptools_is_latest
  tags: siptools

- name: Install dpres-siptools
  pip:
    chdir: "{{ siptools_install_path }}"
    virtualenv: ".venv"
    virtualenv_command: virtualenv-2
    name: .
    state: latest
  become_user: "{{ siptools_user }}"
  tags: siptools

# siptools doesn't report the version correctly to setuptools, so just
# save a file with the latest git tag in the installation directory to
# mark the installed version
- name: Find siptools version using git
  command: "git tag"
  register: tag_output
  args:
    chdir: "{{ siptools_install_path }}"
  become_user: "{{ siptools_user }}"
  when: not siptools_is_latest
  tags: siptools

- name: Get latest siptools version
  set_fact:
    siptools_latest_version: "{{ tag_output.stdout_lines[-1] }}"
  when: not siptools_is_latest
  tags: siptools

- name: Mark installed siptools version
  copy:
    content: "{{ siptools_latest_version }}"
    dest: "{{ siptools_install_path }}/.venv/installed_version"
  become_user: "{{ siptools_user }}"
  when: not siptools_is_latest
  tags: siptools

- name: Check for custom file installation
  stat:
    path: "{{ file_install_path }}/bin/file"
  register: file_output
  tags: file

- name: Check if custom file installation is up-to-date
  set_fact:
    file_is_latest: "{{ file_output.stat.exists }}"
  tags: file

- name: Clone file repository
  git:
    repo: https://github.com/file/file
    dest: /tmp/file
    force: true
    version: "FILE{{ CURRENT_FILE_VERSION.replace('.', '_') }}"
  when: not file_is_latest
  tags: file

- name: Build file - autoreconf
  command: autoreconf -f -i
  args:
    chdir: /tmp/file
  when: not file_is_latest
  tags: file

- name: Build file - configure
  command: "./configure --prefix='{{ file_install_path }}'"
  args:
    chdir: /tmp/file
  when: not file_is_latest
  tags: file

- name: Build file - make
  command: make
  args:
    chdir: /tmp/file
  when: not file_is_latest
  tags: file

- name: Build file - make install
  command: make install
  args:
    chdir: /tmp/file
  when: not file_is_latest
  tags: file

- name: Create file symlink
  file:
    src: "{{ file_install_path }}/bin/file"
    dest: "/usr/bin/file-{{ CURRENT_FILE_VERSION }}"
    state: link
  when: not file_is_latest
  tags: file

- name: Configure file and file-scraper
  lineinfile:
    path: "{{ siptools_install_path }}/.venv/lib/python2.7/site-packages/file_scraper/config.py"
    regexp: "{{ item['regexp'] }}"
    line: "{{ item['line'] }}"
  loop:
    - regexp: "^LD_LIBRARY_PATH"
      line: "LD_LIBRARY_PATH='{{ file_install_path }}/lib'"
    - regexp: "^MAGIC_LIBRARY"
      line: "MAGIC_LIBRARY='{{ file_install_path }}/lib/libmagic.so.1'"
  tags:
    - file
    - file-scraper
    - siptools
